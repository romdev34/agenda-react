import React, {useState} from 'react'
import axios from "axios";
import {updateEvents} from "../features/events.js";
import {useDispatch} from "react-redux";

export default function ModalConnexion({
                                           setDisplayModalConnexion,
                                           setApiState,
                                           ApiState,
                                           setIsLogged
                                       }) {
    const url = import.meta.env.VITE_API_LOGIN_URL
    const dispatch = useDispatch();
    const [email, setEmail] = useState("")
    const [password, setPassword] = useState("")

    async function handleSubmit(e) {
        e.preventDefault()

        const payload = {
            email: email,
            password: password
        }

        console.log("üöÄ D√©but de la connexion...");
        console.log("üìß Email:", email);
        console.log("üîó URL de connexion:", url);

        setApiState({...ApiState, loading: true})

        try {
            // √âtape 1: Connexion et r√©cup√©ration du token
            console.log("üì° Envoi de la requ√™te de connexion...");
            const loginResponse = await axios.post(url, payload);

            console.log("‚úÖ R√©ponse de connexion re√ßue:", loginResponse.status);
            console.log("üé´ Token re√ßu:", loginResponse.data.token ? "OUI" : "NON");

            if (!loginResponse.data.token) {
                throw new Error("Aucun token re√ßu du serveur");
            }

            // √âtape 2: Stockage du token
            console.log("üíæ Stockage du token dans localStorage...");
            localStorage.setItem('token', loginResponse.data.token);

            // V√©rification imm√©diate du stockage
            const storedToken = localStorage.getItem('token');
            console.log("‚úîÔ∏è Token stock√© avec succ√®s:", storedToken ? "OUI" : "NON");
            console.log("üîç Token stock√© (premiers 10 caract√®res):", storedToken ? storedToken.substring(0, 10) + "..." : "AUCUN");

            if (!storedToken) {
                throw new Error("√âchec du stockage du token");
            }

            // √âtape 3: Mise √† jour de l'√©tat de connexion
            setIsLogged(true);
            console.log("üë§ √âtat de connexion mis √† jour");

            // √âtape 4: R√©cup√©ration des √©v√©nements avec le token
            console.log("üìÖ R√©cup√©ration des √©v√©nements...");
            const eventsResponse = await axios.get(
                import.meta.env.VITE_API_EVENTS_URL,
                {
                    headers: {
                        "Authorization": `Bearer ${storedToken}`
                    }
                }
            );

            console.log("‚úÖ √âv√©nements r√©cup√©r√©s:", eventsResponse.data["hydra:member"]?.length || 0, "√©v√©nement(s)");

            // √âtape 5: Mise √† jour du store Redux
            dispatch(updateEvents(eventsResponse.data["hydra:member"]));
            console.log("üîÑ Store Redux mis √† jour");

            // √âtape 6: Fermeture de la modal
            setDisplayModalConnexion(false);
            console.log("üö™ Modal ferm√©e");

        } catch (error) {
            console.error("‚ùå Erreur during connexion:");
            console.error("üìç Type d'erreur:", error.message);

            if (error.response) {
                console.error("üîç Status HTTP:", error.response.status);
                console.error("üìÑ Message serveur:", error.response.data?.message || "Pas de message");
                console.error("üìã Donn√©es compl√®tes:", error.response.data);
            } else if (error.request) {
                console.error("üåê Erreur r√©seau - pas de r√©ponse re√ßue");
            } else {
                console.error("‚öôÔ∏è Erreur de configuration:", error.message);
            }

            // Nettoyage en cas d'erreur
            localStorage.removeItem('token');
            setIsLogged(false);
            console.log("üßπ Token supprim√© et √©tat de connexion r√©initialis√©");

        } finally {
            setApiState({...ApiState, loading: false});
            console.log("üèÅ Processus de connexion termin√©");
        }
    }

    // Fonction utilitaire pour v√©rifier l'√©tat du localStorage
    const checkTokenStatus = () => {
        const token = localStorage.getItem('token');
        console.log("üîç V√©rification token:", {
            exists: !!token,
            length: token?.length || 0,
            preview: token ? token.substring(0, 20) + "..." : "AUCUN"
        });
    };

    // Ajout d'un bouton de d√©bogage (√† retirer en production)
    const DebugButton = () => (
        <button
            type="button"
            onClick={checkTokenStatus}
            className="text-xs bg-gray-500 text-white py-1 px-2 rounded mt-2"
        >
            Debug Token
        </button>
    );

    return (
        <div
            onClick={() => setDisplayModalConnexion(false)}
            className="fixed z-10 inset-0 flex items-center justify-center bg-gray-600/75"
        >
            <form
                onSubmit={handleSubmit}
                onClick={e => e.stopPropagation()}
                className="max-w-[400px] rounded p-7 bg-gray-50 mb-[10vh]"
            >
                <div className="flex items-end mb-5">
                    <p className="font-semibold mr-5">Identifiants </p>
                    <button
                        type="button"
                        onClick={() => setDisplayModalConnexion(false)}
                        className="text-sm bg-red-600 text-white hover:bg-red-700 py-1 px-3 rounded"
                    >
                        Close
                    </button>
                </div>
                <input
                    className="block m-auto border-gray-300 border text-center mb-3 p-2"
                    onChange={(e) => setEmail(e.target.value)}
                    value={email}
                    type="email"
                    placeholder="email"
                    required
                />
                <input
                    className="block m-auto border-gray-300 border text-center mb-3 p-2"
                    onChange={(e) => setPassword(e.target.value)}
                    value={password}
                    type="password"
                    placeholder="password"
                    required
                />
                <button
                    className="w-full text-center text-white cursor-pointer rounded p-2 bg-blue-600 disabled:bg-gray-400"
                    type="submit"
                    disabled={ApiState.loading}
                >
                    {ApiState.loading ? "Connexion..." : "Valider"}
                </button>

                {/* Bouton de d√©bogage - √† retirer en production */}
                <DebugButton />
            </form>
        </div>
    )
}